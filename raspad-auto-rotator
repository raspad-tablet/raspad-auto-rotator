#!/usr/bin/env python3
from sh3001 import Sh3001

import time
from math import asin
import math
import sys
from sh3001.filedb import fileDB
import os
import configparser

USER = os.environ.get('USER')
HOME = os.environ.get('HOME')
CONFIG_FOLDER = '/home/%s/.raspad-auto-rotator' % USER
CONFIG_FILE = '%s/config' % CONFIG_FOLDER

sensor = Sh3001(db=CONFIG_FILE)
db = fileDB(db=CONFIG_FILE)
debug = True
session_type = None

def run_command(cmd=""):
    import subprocess
    if debug:
        print("run_command: %s" % cmd)
    p = subprocess.Popen(
        cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    result = p.stdout.read().decode('utf-8')
    status = p.poll()
    if debug:
        print("run_command: status: %s" % status)
        print("run_command: result: %s" % result)
    return status, result

def usage():
    print("Usage raspad-auto-rotator")
    print("    reset      To reset calibration values")
    print("    stop       To stop auto rotator")
    print("")
    quit()

def x11_rotate(rotation):
    touch = {
        "normal": "1 0 0 0 1 0 0 0 1",
        "left": "0 -1 1 1 0 0 0 0 1",
        "right": "0 1 0 -1 0 1 0 0 1",
        "inverted": "-1 0 1 0 -1 1 0 0 1",
    }
    commands = [
        f"DISPLAY=:0 xrandr --output HDMI-1 --rotate {rotation}",
        f"DISPLAY=:0 xinput --set-prop 'ILITEK ILITEK-TP' 'Coordinate Transformation Matrix' {touch[rotation]}",
        f"DISPLAY=:0 xinput --set-prop 'HID 222a:0001' 'Coordinate Transformation Matrix' {touch[rotation]}",
    ]
    for command in commands:
        run_command(command)

def wayland_rotate(rotation):
    angles = {
        "normal": "normal",
        "left": "90",
        "right": "270",
        "inverted": "180",
    }
    # command = f"WAYLAND_DISPLAY=wayland-1 wlr-randr --output HDMI-A-1 --transform {angles[rotation]}"
    command = f"wlr-randr --output HDMI-A-1 --transform {angles[rotation]}"
    run_command(command)
    # wayland_rotrate_touch(rotation)

def lsusb():
    _, result = run_command("lsusb")
    lines = result.strip().split("\n")
    result = []
    for line in lines:
        data = line.split(' ')
        print(data)
        pidvid = data[5]
        name = " ".join(data[6:])
        result.append((pidvid, name))
    return result

def wayland_rotrate_touch(rotation):
    # get touch device name
    AVAILABLE_DEVICES = [
        "222a:0001"
    ]
    touch_device = ""
    result = lsusb()
    for item in result:
        if item[0] in AVAILABLE_DEVICES:
            touch_device = item[1]
            break
    else:
        print("No touch device found")
        return

    # check if wayfire.ini exists
    if not os.path.exists(f"{HOME}/.config/wayfire/wayfire.ini"):
        print("wayfire.ini not found")
        # check if wayfire folder exists
        if not os.path.exists(f"{HOME}.config/wayfire"):
            os.mkdir(f"{HOME}/.config/wayfire")
        # create wayfire.ini
        with open(f"{HOME}/.config/wayfire/wayfire.ini", "w") as f:
            f.write(f"[input-device:{touch_device}]\n")
            f.write(f"transform=0\n")

    angles = {
        "normal": "0",
        "left": "90",
        "right": "270",
        "inverted": "180",
    }
    config = configparser.ConfigParser()
    config.read(f"{HOME}/.config/wayfire/wayfire.ini")
    session = f"input-device:{touch_device}"
    if session not in config.sections():
        config.add_section(session)
    config.set(session, "transform", angles[rotation])
    with open(f"{HOME}/.config/wayfire/wayfire.ini", 'w') as configfile:
        config.write(configfile)

def rotate(rotation):
    if session_type == "x11":
        x11_rotate(rotation)
    elif session_type == "wayland":
        wayland_rotate(rotation)

def check_session_type():
    _, session_ids = run_command("loginctl list-sessions --no-legend | awk '{print $1}'")
    session_ids = session_ids.split("\n")
    for session_id in session_ids:
        if session_id == "":
            continue
        _, session_type = run_command("loginctl show-session %s -p Type --no-legend" % session_id)
        session_type = session_type.split("=")[1].strip()
        print(f"session {session_id} type: {session_type}")
        if session_type == "x11":
            return "x11"
        if session_type == "wayland":
            return "wayland"

def main():
    global session_type
    current_rotation = None
    last_rotation = None
    rotate_angle = db.get("rotate_angle", "90")
    session_type = check_session_type()
    if session_type is None:
        print("No session found")
        quit()

    while True:
        try:
            # Peek filter
            data_list = [[], [], []]
            for _ in range(10):
                data = sensor._sh3001_getimudata()[0]
                for i in range(3):
                    data_list[i].append(data[i])
            acc_data = []
            for axis in data_list:
                axis.remove(max(axis))
                axis.remove(min(axis))
                avg = sum(axis) / len(axis)
                acc_data.append(avg)
            # Peek filter end

            acc_max = list(map(max, sensor.acc_max, acc_data))
            acc_min = list(map(min, sensor.acc_min, acc_data))
            acc_offset = list(map(lambda a, b: (a + b)/2, acc_max, acc_min))
            if acc_offset != sensor.acc_offset:
                sensor.acc_max = acc_max
                sensor.acc_min = acc_min
                sensor.acc_offset = acc_offset
                sensor.set_offset()
            acc_data = [(acc_data[i] - sensor.acc_offset[i]) for i in range(len(acc_data))]
            if debug:
                 print('\033[K\racc_offset: %s   acc_data: %s' % (sensor.acc_offset, acc_data), end="", flush=True)

        except IOError:
            print("read module error.")
            time.sleep(1)
            continue
        acc_data = [max(-2046, min(2046, i)) for i in acc_data]
        current_angle_x = (asin(acc_data[0] / 2046.0)) / math.pi * 180
        current_angle_y = (asin(acc_data[1] / 2046.0)) / math.pi * 180
        time.sleep(0.1)
        if current_angle_y > 45:
            current_rotation = "normal"
        elif current_angle_y < -45:
            current_rotation = "inverted"
        elif rotate_angle == "90":
            if current_angle_x > 45:
                current_rotation = "left"
            elif current_angle_x < -45:
                current_rotation = "right"
        
        if (current_rotation != last_rotation) and (current_rotation is not None):
            last_rotation = current_rotation
            rotate(current_rotation)
        time.sleep(1)

def stop():
    _, result = run_command("ps aux | grep 'raspad-auto-rotator'")
    pids = []
    for line in result.split("\n"):
        if line == "":
            continue
        line = line.split(' ')
        if "grep" in line:
            continue
        if "reset" in line:
            continue
        while True:
            line.remove("")
            if "" not in line:
                break
        if len(line) == 0:
            continue
        if line[10] != "python3":
            continue
        pids.append(line[1])
    if len(pids) > 0:
        pids = " ".join(pids)
        run_command("sudo kill %s" % pids)

def restart():
    stop()
    os.system("/usr/local/bin/raspad-auto-rotator 2>&1 1>/dev/null &")

skip = False

if __name__ == '__main__':
    if len(sys.argv) >= 2:
        if sys.argv[1] == "stop":
            stop()
            skip = True
        elif sys.argv[1] == "reset":
            run_command("rm %s" % CONFIG_FILE)
            restart()
            skip = True
        elif sys.argv[1] == "debug":
            debug = True
        else:
            usage()

    if not skip:
        main()

#!/usr/bin/env python3
from sh3001 import Sh3001

import time
from math import asin
import math
import sys
from sh3001.filedb import fileDB
import os

USER = os.environ.get('USER')
CONFIG_FOLDER = '/home/%s/.raspad-auto-rotator' % USER
CONFIG_FILE = '%s/config' % CONFIG_FOLDER

sensor = Sh3001(db=CONFIG_FILE)
db = fileDB(db=CONFIG_FILE)
current_rotation = None
debug = False

def run_command(cmd=""):
    import subprocess
    if debug:
        print("run_command: %s" % cmd)
    p = subprocess.Popen(
        cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    result = p.stdout.read().decode('utf-8')
    status = p.poll()
    if debug:
        print("run_command: status: %s" % status)
        print("run_command: result: %s" % result)
    return status, result

def usage():
    print("Usage raspad-auto-rotator")
    print("    reset      To reset calibration values")
    print("")
    quit()

def rotate(rotation):
    global current_rotation
    if rotation == current_rotation:
        return
    current_rotation = rotation
    if debug:
        print("Rotate %s" % rotation)
    run_command("rotate-helper %s" % rotation)

def main():
    rotate_angle = db.get("rotate_angle", "90")

    while True:
        try:
            acc_data = sensor._sh3001_getimudata()[0]

            acc_max = list(map(max, sensor.acc_max, acc_data))
            acc_min = list(map(min, sensor.acc_min, acc_data))
            acc_offset = list(map(lambda a, b: (a + b)/2, acc_max, acc_min))
            if acc_offset != sensor.acc_offset:
                sensor.acc_max = acc_max
                sensor.acc_min = acc_min
                sensor.acc_offset = acc_offset
                sensor.set_offset()
            acc_data = [(acc_data[i] - sensor.acc_offset[i]) for i in range(len(acc_data))]
            if debug:
                 print('\033[K\racc_offset: %s   acc_data: %s' % (sensor.acc_offset, acc_data), end="", flush=True)

        except IOError:
            print("read module error.")
            time.sleep(1)
            continue
        acc_data = [max(-2046, min(2046, i)) for i in acc_data]
        current_angle_x = (asin(acc_data[0] / 2046.0)) / math.pi * 180
        current_angle_y = (asin(acc_data[1] / 2046.0)) / math.pi * 180
        time.sleep(0.1)
        if current_angle_y > 45:
            rotate("normal")
        elif current_angle_y < -45:
            rotate("inverted")
        elif rotate_angle == "90":
            if current_angle_x > 45:
                rotate("left")
            elif current_angle_x < -45:
                rotate("right")
        time.sleep(1)

if __name__ == '__main__':
    if len(sys.argv) >= 2:
        if sys.argv[1] == "reset":
            run_command("rm %s" % CONFIG_FILE)
            run_command("sudo kill $(ps aux | grep 'raspad-auto-rotator' | awk '{ print $2 }') && raspad-auto-rotator &")
            quit()
        elif sys.argv[1] == "debug":
            debug = True
        else:
            usage()

    main()

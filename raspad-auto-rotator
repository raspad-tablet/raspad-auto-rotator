#!/usr/bin/env python3
from sh3001 import Sh3001

import time
from math import asin
import math
import sys
from sh3001.filedb import fileDB
import os

AUTOSTART_DIR = "/etc/xdg/autostart/"
USER = os.getenv("SUDO_USER")

if USER == None:
    from os.path import expanduser
    HOME = expanduser("~")
else:
    HOME = "/home/%s" % USER

sensor = Sh3001(db='%s/.config/raspad-auto-rotator/config' % HOME)
db = fileDB(db='%s/.config/raspad-auto-rotator/config' % HOME)

def run_command(cmd=""):
    import subprocess
    p = subprocess.Popen(
        cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    result = p.stdout.read().decode('utf-8')
    status = p.poll()
    return status, result

def usage():
    print("Usage raspad-auto-rotator [calibrate]")
    quit()

def rotate(direction):
    if direction == "normal":
        display = "normal"
        touch = "1 0 0 0 1 0 0 0 1"
    elif direction == "inverted":
        display = "inverted"
        touch = "-1 0 1 0 -1 1 0 0 1"
    elif direction == "left":
        display = "left"
        touch = "0 -1 1 1 0 0 0 0 1"
    elif direction == "right":
        display = "right"
        touch = "0 1 0 -1 0 1 0 0 1"
    run_command("xrandr --output HDMI-1 --rotate %s" % display)
    # get name from `xinput -list`
    run_command("xinput --set-prop 'ILITEK ILITEK-TP' 'Coordinate Transformation Matrix' %s" % touch)
    run_command("xinput --set-prop 'HID 222a:0001' 'Coordinate Transformation Matrix'%s" % touch)

def main():
    rotate_angle = db.get("rotate_angle", "90")

    while True:
        try:
            acc_data = sensor._sh3001_getimudata()[0]

            acc_max = list(map(max, sensor.acc_max, acc_data))
            acc_min = list(map(min, sensor.acc_min, acc_data))
            acc_offset = list(map(lambda a, b: (a + b)/2, acc_max, acc_min))
            if acc_offset != sensor.acc_offset:
                sensor.acc_max = acc_max
                sensor.acc_min = acc_min
                sensor.acc_offset = acc_offset
                sensor.set_offset()
            acc_data = [(acc_data[i] - sensor.acc_offset[i]) for i in range(len(acc_data))]
        except IOError:
            print("read module error.")
            time.sleep(1)
            continue
        acc_data = [max(-2046, min(2046, i)) for i in acc_data]
        current_angle_x = (asin(acc_data[0] / 2046.0)) / math.pi * 180
        current_angle_y = (asin(acc_data[1] / 2046.0)) / math.pi * 180
        time.sleep(0.1)
        if current_angle_y > 45:
            # print("normal")
            rotate("normal")
        elif current_angle_y < -45:
            # print("inverted")
            rotate("inverted")
        elif rotate_angle == "90":
            if current_angle_x > 45:
                # print("left")
                rotate("left")
            elif current_angle_x < -45:
                # print("right")
                rotate("right")
        time.sleep(1)

if __name__ == '__main__':
    main()
